am
as.boolean(am)
am_col <- c("red", "blue")
am_col <- c("red", "blue")
plot(mpg~wt, col=c("red", "blue")
)
c("red", "blue")
c("red", "blue") * am
c("red", "blue") * as.numeric(am)
plot(mpg~wt, col=c("red", "blue")[am])
plot(mpg~wt, col=c("red", "blue")[2-am])
plot(mpg~wt, col=c("red", "blue")[2-as.numeric(am])
plot(mpg~wt, col=c("red", "blue")[2-as.numeric(am)])
plot(mpg~wt, col=c("red", "blue")[3-as.numeric(am)])
c("red","blue")[1]
c("red","blue")[2]
c("red","blue")[0]
3-as.numeric(am)
as.numeric(am)
plot(mpg~wt, data = mtcars, subset = am== 0)
plot(mpg~wt, data = mtcars, subset = am== 1)
plot(mpg~wt, data = mtcars, subset = am== 2)
plot(mpg~wt, data = mtcars, subset = am== 0)
plot(mpg~wt, col = am)
plot(mpg~wt, col = am)
plot(mpg~wt, type = "n")
points(mpg~wt, data = mtcars, subset = am ==0)
anova(lm(mpg~am+wt+hp))
fit1 <- lm(mpg~am)
fit2 <- lm(mpg~am+wt+hp)
anova(fit1,fit2)
anova(fit2)
summary(fit2)
summary(fit1)$coef
anova(fit2)
summary(fit1)
summary(fit2)$coef
Man <- subset(mpg, am == "Manual")
Aut <- subset(mpg, am == "Automatic")
t.test(Man,Aut)
am_t <- t.test(Man,Aut)
names(am_t)
am_t
(am_t)$p.value
t.test(Man,Aut)$[1]
t.test(Man,Aut)[1]
t.test(Man,Aut)[2]
t.test(Man,Aut)[3]
t.test(Man,Aut)[3:4]
table(t.test(Man,Aut)[3:4])
print(t.test(Man,Aut)[3:4])
p <- t.test(Man,Aut)[3]
p
names(p)
p$p.value
print("p-value", p$p.value)
print("p-value"+ p$p.value)
summary(fit1)$coef
summary(fit1)$coef[2]
names(summary(fit1))
summary(fit1)$r.squared
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(predictors)
head(diagnosis)
adData = data.frame(diagnosis, predictors)
head(adData)
adData2 = data.frame(predictors)
head(adData2)
?AlzheimerDisease
head(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(CompressiveStrengh, data = concrete)
names(concrete)
plot(concrete$CompressiveStrength)
qplot(CompressiveStrength, colour = Cement, data = concrete)
qplot(concete$CompressiveStrength, colour = Cement, data = concrete)
qplot(concrete$CompressiveStrength, colour = Cement, data = concrete)
qplot(index, CompressiveStrength, colour = Cement, data = concrete)
qplot(CompressiveStrength, colour = Cement, data = concrete)
qplot(CompressiveStrength, data = concrete)
library(Hmisc)
plot(concrete$CompressiveStrength, colour = concrete$FlyAsh)
qplot(concrete$CompressiveStrength, colour = concrete$FlyAsh)
names(concrete)
head(concrete)
length(concrete)
dim(concrete)
index <- c(1:1030)
dim(index)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, colour = concrete$FlyAsh)
cutFly <- cut2(concrete$FlyAsh, g = 3)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, colour = cutFly)
cutFly <- cut2(concrete$FlyAsh, g = 5)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, colour = cutFly)
cutFly <- cut2(concrete$FlyAsh, g = 2)
qplot(seq_along(concrete$CompressiveStrength), concrete$CompressiveStrength, colour = cutFly)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(concrete$Superplasticizer)
head(concrete$Superplasticizer)
plot(log(concrete$Superplasticizer))
plot(log(concrete$Superplasticizer+1))
qplot(log(concrete$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
names(training[,58:69])
sub_training <- training[,58:69]
preProc <- preProcess(sub_training, method = "pca")
summary(preProc)
summary(preProc, pcaComp = 11)
preProc <- preProcess(sub_training, method = "pca", pcaComp = 11)
summary(preProc)
preProc$mean
preProc$std
prComp <- prcomp(sub_training)
names(prComp)
prComp$x
prComp$scale
names(prComp)
preProc <- preProcess(sub_training, method = "pca", threshold = 0.9)
names(preProc)
summary(preProc)
preProc2 <- preProcess(sub_training, method = "pca", threshold = 0.99)
summary(preProc2)
preProc2 <- preProcess(sub_training, method = "pca", threshold = 0.9999999)
summary(preProc2)
preProc2$dim
preProc$dim
sub_training
dim(sub_training)
preProc$dim
tt <- predict(preProc, sub_training)
names(tt)
preProc <- preProcess(sub_training, method = "pca", threshold = 0.9)
tt <- predict(preProc, sub_training)
names(tt)
preProc <- preProcess(sub_training, method = "pca", threshold = 0.999)
tt <- predict(preProc, sub_training)
names(tt)
preProc <- preProcess(sub_training, method = "pca", threshold = 0.1)
tt <- predict(preProc, sub_training)
names(tt)
tt
preProc <- preProcess(sub_training, method = "pca", thresh = 0.1)
tt <- predict(preProc, sub_training)
names(tt)
preProc <- preProcess(sub_training, method = "pca", thresh = 0.9)
tt <- predict(preProc, sub_training)
names(tt)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
sub_training = training[,58:69]
names(sub_training)
prePCA <- preProcess(sub_training, method = "pca", thresh = 0.8)
modelFit1 <- predict(diagnosis ~ sub_training, method = "glm")
modelFit1 <- train(diagnosis ~ sub_training, method = "glm")
modelFit1 <- train(adData$diagnosis ~ sub_training, method = "glm")
modelFit1 <- train(adData$diagnosis ~ adData$training[,58:69], method = "glm")
modelFit1 <- train(adData$diagnosis ~ ., method = "glm", data = sub_training)
names(traning)
names(training)
sub_adData = data.frame(diagnosis, sub_training)
sub_adData = data.frame(training[,1], training[,58:69])
modelFit1 <- train(adData$diagnosis ~ ., method = "glm", data = sub_adData)
modelFit1 <- train(diagnosis ~ ., method = "glm", data = sub_adData)
modelFit1 <- train(sub_adData$diagnosis ~ ., method = "glm", data = sub_adData)
names(sub_adData)
inNames <- names(sub_adData)
inNames
inNames(1) = diagnosis
inNames(1) = "diagnosis""
inNames(1) = "diagnosis"
inNames(1) = "diagnosis"
inNames(1) <- "diagnosis"
inNames[1] <- "diagnosis"
names(sub_adData) <- inNames
names(sub_adData)
names(adData[,1])
names(adData)
modelFit1 <- train(sub_adData$diagnosis ~ ., method = "glm", data = sub_adData)
modelFit1 <- train(diagnosis ~ ., method = "glm", data = sub_adData)
install.packages("e1071")
modelFit1 <- train(diagnosis ~ ., method = "glm", data = sub_adData)
summary(modelFit1)
modelFit1
modelFit1 <- train(diagnosis ~ ., method = "glm", preProcess = "pca", data = sub_adData)
modelFit1
modelFit1 <- train(diagnosis ~ ., method = "glm", preProcess = "pca", thresh = 0.8, data = sub_adData)
prePCA <- preProcess(sub_training, method = "pca", thresh = 0.8)
prePCA <- preProcess(sub_adData[-1], method = "pca", thresh = 0.8)
trainPC <- predict(prePCA, sub_adData[-1])
modelFit2 <- train(sub_adData$diagnosis ~ ., method  ="glm", data = trainPC)
modelFit2
modelFit1 <- train(diagnosis ~ ., method = "glm", data = sub_adData)
modelFit1
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
cor(concrete$CompressiveStrength,concrete$FlyAsh)
cor(concrete$CompressiveStrength,concrete$Water)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
pairs(~ CompressiveStrength+FlyAsh, data = concrete)
qplot(seq_along(CompressiveStrength),CompressiveStrength)
qplot(seq_along(CompressiveStrength),CompressiveStrength, data = concrete)
names(concrete)
qplot(seq_along(CompressiveStrength),CompressiveStrength, data = concrete, colours = Age)
qplot(seq_along(CompressiveStrength),CompressiveStrength, colours = Age, data = concrete)
qplot(seq_along(CompressiveStrength),CompressiveStrength, colours = concrete$Age, data = concrete)
qplot(seq_along(CompressiveStrength),CompressiveStrength, colours = concrete$water, data = concrete)
qplot(seq_along(CompressiveStrength),CompressiveStrength, colours = concrete$FlyAsh, data = concrete)
qplot(seq_along(CompressiveStrength),CompressiveStrength, colours = FlyAsh, data = concrete)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colours = concrete$FlyAsh)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colours = concrete$FlyAsh+1)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colour = concrete$FlyAsh)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colour = concrete$Water)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colour = concrete$Superplasticizer)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colour = concrete$FineAggregate)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colour = concrete$Age)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colour = concrete$CoarseAggregate)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colour = concrete$Cement)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colour = concrete$BlastFurnaceSlag)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colour = concrete$FlyAsh)
cutFly <- cut2(concrete$FlyAsh, g=3)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colour = cutFly)
cutFly <- cut2(concrete$FlyAsh, g=2)
qplot(seq_along(concrete$CompressiveStrength),concrete$CompressiveStrength, colour = cutFly)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
prePCA <- preProcess(sub_adData[-1], method = "pca", thresh = 0.8)
trainPC <- predict(prePCA, sub_adData[-1])
dim(trainPC)
names(trainPC)
prePCA <- preProcess(sub_adData[-1], method = "pca", thresh = 0.9)
trainPC <- predict(prePCA, sub_adData[-1])
names(trainPC)
clear.all
clear.all()
clear
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
inCase <- createDataPartition(y = segmentationOriginal$Case, p = 0.6, list = FALSE)
training <- segmentationOriginal[inCase,]
testing <- segmentationOriginal[-inCase,]
dim(training);dim(testing)
set.seed(125)
modFit <- train(Case~., method = "rpart", data = segmentationOriginal)
CART model with the rpart method
modFit <- train(Case~., method = "rpart", data = segmentationOriginal)
newData <- data.frame(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
newData <- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modFit, newdata = newData)
predict(modFit, TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2 )
predict(modFit, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modFit, newdata = testing)
head(modFit)
head(segmentationOriginal$Case)
head(training)
head(testing$Case)
head(training$Case)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal$Case)
names(segmentationOriginal)
head(segmentationOriginal$Cell)
head(segmentationOriginal$Class)
head(segmentationOriginal[,3])
training <- segmentationOriginal[segmentationOriginal$Case == Train]
training <- segmentationOriginal[segmentationOriginal$Case == 'Train']
training <- segmentationOriginal[,segmentationOriginal$Case == 'Train']
inTrain <- segmentationOriginal$Case == 'Train'
head(inT)
head(inTrain)
head(segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Class~., method = "rpart", data = segmentationOriginal)
set.seed(125)
modFit <- train(Class~., method = "rpart", data = segmentationOriginal)
predict(modFit, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modFit, testing)
predict(modFit, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
InPred <- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
InPred
predict(modFit, newdata = InPred)
predict(modFit, newdata = testing)
predict(modFit, InPred)
modFit$finalModel
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel$)
plot(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
modFit <- train(Class~., method = "rpart2", data = segmentationOriginal)
fancyRpartPlot(modFit$finalModel)
set.seed(125)
modFit <- train(Class~., method = "rpart2", data = segmentationOriginal)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
modFit <-train(Area~., method="rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
fancyRpartPlot(modFit$finalModel)
head(olive$Area)
summary(olive$Area)
table(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(SAheart)
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method = "glm", family="binomial")
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method = "glm", family="binomial", data=SAheart)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method = "glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
misClaa(testSA, predict(modFit, testSA))
misClass(testSA, predict(modFit, testSA))
missClass(testSA, predict(modFit, testSA))
missClass(trainSA, predict(modFit, trainSA))
predict(modFit, testSA)
testSA
predict(modFit, testSA)
missClass(trainSA$chd, predict(modFit, trainSA))
missClass(testSA$chd, predict(modFit, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowet.train)
names(vowel.train)
vowel.train$y <= factor(vowel.train$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modFit<-train(y~., method="rf", data=vowel.train, prox=TRUE)
set.seed(33833)
modFit<-train(y~., method="rf", data=vowel.train, prox=TRUE)
modImp <- varImp(modFit)
modImp
order(modImp)
methods
method(lm)
methods(lm)
methods(colSums)
methods(show)
methods(dgamma)
show(1)
x <- rnorm(100)
y <-x+rnorm(100)
lm(y~x)
?dgamma
showMethods()
showMethods(dgamma)
S3Methods(dgamma)
showMethods(colSums)
showMethods(show)
showMethods(lm)
showMethods("base")
whos
ls
ls()
head(test)
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
library(ggplot2)
dsmall =diamonds[ sample (1: dim(diamonds)[1] ,10000) ,]
dselect <- dsmall[(dsmall$color == "D"),]
M1 <- =lm( price~0+carat+I(carat^2) , dselect )
M1 <- lm( price~0+carat+I(carat^2) , dselect )
predict(M1,1)
predict(M1,carat = 1)
?predict
predict(M1,carat = c(1))
predict(M1,carat = data.frame(1))
M1
predict(M1, carat=1)
predict(M1, data.frame(carat=1))
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
?log
exp(1)
e
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/app-1')
shiny::runApp('Coursera/Data Science/9. Product/CourseProject/MCapp')
setwd('./Coursera//Data Science/9. Product//CourseProject//MCapp//MCproject')
publish(title = 'DPPproject', 'index.html', host = 'rpubs')
library(slidify)
publish(title = 'DPPproject', 'index.html', host = 'rpubs')
getwd()
library(knitr)
publish(title = 'DPPproject', 'index.html', host = 'rpubs')
publish(title = 'DPPproject', 'index.html', host = 'http://rpubs.com/mcouillard')
library(devtools)
publish(title = 'DPPproject', 'index.html', host = 'http://rpubs.com/mcouillard')
publish(title = 'DPPproject', 'index.html', host = 'rpubs')
publish(title = 'MCproject', 'index.html', host = 'rpubs')
setwd('../')
publish(title = 'MCproject', 'index.html', host = 'rpubs')
setwd('./MCproject/')
publish(title = 'MCproject', 'index.html', host = 'rpubs')
publish_github('martincouillard', 'repo'DDPproject'')
publish_github('martincouillard', 'repo'DDPproject')
publish_github('martincouillard', 'DDPproject')
publish_github('martincouillard', 'DDPpresentation')
publish_github('martincouillard', 'https://github.com/martincouillard/DDPpresentation')
